{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","latitude","longitude","zoom","viewport","setViewport","positionX","setPositionX","positionY","setPositionY","cost","setCost","IncidentName","Acres","CreateDate","GlobalId","popUp","setPopUp","handleOnClick","e","Long","Lat","lngLat","lng","lat","features","properties","GISAcres","axios","post","then","data","get_cost_success","console","log","catch","error","parseFloat","toFixed","MapboxLayer","id","type","ScatterplotLayer","position","size","getPosition","d","getRadius","getColor","onClick","className","href","target","style","width","height","mapStyle","onViewportChange","accessToken","source","layout","paint","closeButton","closeOnClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,2NC0I5BC,MA5Gf,WAAgB,IAAD,EAEmBC,mBAAS,CACvCC,SAAU,UACVC,WAAY,UACZC,KAAM,IALK,mBAENC,EAFM,KAEIC,EAFJ,OAOqBL,mBAAS,GAP9B,mBAONM,EAPM,KAOKC,EAPL,OAQqBP,mBAAS,GAR9B,mBAQNQ,EARM,KAQKC,EARL,OASWT,mBAAS,GATpB,mBASNU,EATM,KASAC,EATA,OAUaX,mBAAS,CACjCY,aAAc,GACdC,MAAM,EACNC,WAAW,GACXC,SAAS,KAdE,mBAUNC,EAVM,KAUCC,EAVD,KAiBPC,EAAgB,SAACC,GAhCzB,IAAkBC,EAAMC,EAAKR,EAiCzBN,EAAaY,EAAEG,OAAOC,KACtBd,EAAaU,EAAEG,OAAOE,MAlCRJ,EAoCLD,EAAEG,OAAOC,IApCEF,EAoCGF,EAAEG,OAAOE,IApCPX,EAoCYM,EAAEM,SAAS,GAAGC,WAAWC,SAxBxDC,IAAMC,KAdK,wDAcc,CAACT,OAAMC,MAAKR,WAwB8BiB,MAAK,YAA2C,IAAD,IAAvCC,KAA0BrB,GAAa,EAA/BsB,iBAA+B,EAAbtB,MACzGC,EAAQD,GACRuB,QAAQC,IAAI,eAAgBxB,MAE7ByB,OAAM,SAAAC,GACLH,QAAQC,IAAI,aAAcE,MAG5BnB,EAAS,CACPL,aAAcO,EAAEM,SAAS,GAAGC,WAAWd,aACvCC,MAAOwB,WAAWlB,EAAEM,SAAS,GAAGC,WAAWC,UAAUW,QAAQ,GAC7DxB,WAAWK,EAAEM,SAAS,GAAGC,WAAWZ,WACpCC,SAAUI,EAAEM,SAAS,GAAGC,WAAWX,YAavC,OAVoB,IAAIwB,IAAY,CAClCC,GAAI,iBACJC,KAAMC,IACNX,KAAM,CAAC,CAAEY,SAAU,EAAE,KAAM,IAAKC,KAAM,MACtCC,YAAa,SAACC,GAAD,OAAOA,EAAEH,UACtBI,UAAW,SAACD,GAAD,OAAOA,EAAEF,MACpBI,SAAU,CAAC,IAAK,EAAG,GACnBC,QAAQ,SAAC9B,GAAD,OAAOc,QAAQC,IAAIf,MAI3B,yBAAK+B,UAAU,OACb,4BAAQA,UAAU,gBAChB,+EAIA,yCACA,uBAAGC,KAAK,gGACRC,OAAO,UADP,uBAKF,4BAAQF,UAAU,cAGhB,oCACE,kBAAC,IAAD,CACEG,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAChCC,SAAS,iCACTvD,SAAUG,EAASH,SACnBC,UAAWE,EAASF,UACpBC,KAAMC,EAASD,KACfsD,iBAAkBpD,EAClBqD,YAAY,8FAEZ,kBAAC,IAAD,CAAQlB,GAAG,QAAQC,KAAK,UAAUV,KAAK,oFACvC,kBAAC,IAAD,CACES,GAAG,QACHC,KAAK,OACLkB,OAAO,QACPC,OAAQ,CACN,YAAa,QACb,WAAY,SAEdC,MAAO,CACL,aAAc,UACd,aAAc,GAEhBZ,QAAS,SAAA9B,GAAC,OAAGD,EAAcC,MAK5BT,GACD,kBAAC,IAAD,CAAOR,UAAWI,EAAWL,SAAUO,EAAWsD,aAAa,EAAOC,cAAc,GAClF,qCAAW/C,EAAMJ,cACjB,6CAAmBI,EAAMH,MACzB,6BADA,eACkBG,EAAMF,YAExB,+CAAqBJ,SClHfsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd3C,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM2C,c","file":"static/js/main.af2bd990.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from 'react';\nimport Draw from '@urbica/react-map-gl-draw';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport MapGL, { Source, Layer, CustomLayer, Popup } from '@urbica/react-map-gl';\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\nimport { MapboxLayer } from '@deck.gl/mapbox';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport axios from \"axios\";\n\n\n//const get_data_url = \"http://d8bd26560c2d.ngrok.io/api/cost\";\nconst get_data_url = \"https://stark-brushlands-63325.herokuapp.com/api/cost\";\n//const get_data_url = \"api.qmic.online/api/v1/login\";\nfunction get_data(Long, Lat, Acres ) {\n  /*return axios.post({\n        method: 'post',\n        headers: {    \n            'crossDomain': true,\n            'Content-Type': 'application/json',\n            //'Content-Type': 'text/plain;charset=utf-8',\n        },\n        url: get_data_url,\n        data: {Long, Lat, Acres},\n    });*/\n\n   return axios.post(get_data_url, {Long, Lat, Acres});\n}\n\nfunction App() {\n  \n  const [viewport, setViewport] = useState({\n    latitude: 39.565055, \n    longitude: -102.264490,\n    zoom: 4\n  });\n  const [positionX, setPositionX] = useState(1);\n  const [positionY, setPositionY] = useState(1);\n  const [cost, setCost] = useState(0);\n  const [popUp, setPopUp] = useState({\n    IncidentName: \"\",\n    Acres:0,\n    CreateDate:\"\",\n    GlobalId:\"\"\n  });\n  \n  const handleOnClick = (e) => {\n    setPositionX(e.lngLat.lng)\n    setPositionY(e.lngLat.lat)\n\n    get_data(e.lngLat.lng, e.lngLat.lat, e.features[0].properties.GISAcres ).then(({ data: { get_cost_success, cost } }) => {\n      setCost(cost)\n      console.log(\"gelen data: \", cost)\n    })\n    .catch(error => {\n      console.log(\"gelen hata\", error)\n    })\n    \n    setPopUp({\n      IncidentName: e.features[0].properties.IncidentName,\n      Acres: parseFloat(e.features[0].properties.GISAcres).toFixed(2),\n      CreateDate:e.features[0].properties.CreateDate,\n      GlobalId: e.features[0].properties.GlobalId\n    })\n  }\n  const myDeckLayer = new MapboxLayer({\n    id: 'my-scatterplot',\n    type: ScatterplotLayer,\n    data: [{ position: [-74.5, 40], size: 1000 }],\n    getPosition: (d) => d.position,\n    getRadius: (d) => d.size,\n    getColor: [255, 0, 0],\n    onClick:(e) => console.log(e)\n  });\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-headline\">\n        <h1>\n            Welcome to Wild Fire Economical Cost Simulator\n        </h1>\n      </header>\n        <h4>Created by\n        <a href=\"https://2020.spaceappschallenge.org/challenges/confront/spot-fire-3/teams/fire-spotting-team/\"\n        target=\"_blank\"\n        >Fire Spotting Team\n        </a>\n        </h4>\n      <header className=\"App-header\">\n        {//<img src={logo} className=\"App-logo\" alt=\"logo\" />}\n        }\n        <>\n          <MapGL\n            style={{ width: '100%', height: '800px' }}\n            mapStyle='mapbox://styles/mapbox/dark-v9'\n            latitude={viewport.latitude}\n            longitude={viewport.longitude}\n            zoom={viewport.zoom}\n            onViewportChange={setViewport}\n            accessToken='pk.eyJ1IjoieWF2dXphbHAiLCJhIjoiY2tmdGcxNmplMDk3aDJxcTZmc3EzaWZwaSJ9.YPqh1B61pKugamU81EK7gA'\n          >\n            <Source id='route' type='geojson' data='https://opendata.arcgis.com/datasets/5da472c6d27b4b67970acc7b5044c862_0.geojson' />\n            <Layer\n              id='route'\n              type='line'\n              source='route'\n              layout={{\n                'line-join': 'round',\n                'line-cap': 'round'\n              }}\n              paint={{\n                'line-color': '#8b0000',\n                'line-width': 4\n              }}\n              onClick={e=> handleOnClick(e)}\n            />\n            {/*<CustomLayer \n            layer={myDeckLayer} \n            />*/}\n            {cost &&\n            <Popup longitude={positionX} latitude={positionY} closeButton={false} closeOnClick={false}>\n              <h3>Name: {popUp.IncidentName}</h3>\n              <h4>Acres Burned: {popUp.Acres}\n              <br/>Start Date: {popUp.CreateDate}\n              </h4>\n              <h2>Estimated Cost: {cost}</h2>\n            </Popup>\n            }\n          </MapGL>\n\n          \n        </>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}